import os
import sys
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import math
from pathlib import Path
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

from ballistic_simulation import BallisticSimulation, ProjectileData, AtmosphericConditions, AerodynamicCoefficients, FittingFactors
from chart_utils import ChartUtils

def load_fire_table_data(file_path: str) -> pd.DataFrame:
    """
    Carrega e valida os dados da tabela de tiro
    
    Args:
        file_path: Caminho para o arquivo CSV
        
    Returns:
        DataFrame com os dados processados
    """
    try:
        # Verificar se o arquivo existe
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Arquivo n√£o encontrado: {file_path}")
        
        # Carregar dados
        df = pd.read_csv(file_path)
        print(f"‚úì Arquivo carregado com sucesso: {len(df)} registros")
        print(f"‚úì Colunas dispon√≠veis: {list(df.columns)}")
        
        # Validar colunas necess√°rias
        required_columns = ['velocity_ms', 'range_m', 'elevation_deg', 'drift_deg']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            # Tentar mapear colunas com nomes similares
            column_mapping = {
                'velocity': 'velocity_ms',
                'vel': 'velocity_ms',
                'muzzle_velocity': 'velocity_ms',
                'range': 'range_m',
                'distance': 'range_m',
                'elevation': 'elevation_deg',
                'elev': 'elevation_deg',
                'qe': 'elevation_deg',
                'drift': 'drift_deg',
                'deflection': 'drift_deg',
                'drift_corr': 'drift_deg'
            }
            
            for orig_col in df.columns:
                for map_key, target_col in column_mapping.items():
                    if map_key.lower() in orig_col.lower() and target_col in missing_columns:
                        df.rename(columns={orig_col: target_col}, inplace=True)
                        missing_columns.remove(target_col)
                        print(f"‚úì Coluna mapeada: {orig_col} -> {target_col}")
        
        # Verificar se ainda h√° colunas faltando
        if missing_columns:
            raise ValueError(f"Colunas obrigat√≥rias n√£o encontradas: {missing_columns}")
        
        # Limpar e validar dados
        df_clean = df[required_columns].copy()
        
        # Remover valores nulos ou inv√°lidos
        initial_count = len(df_clean)
        df_clean = df_clean.dropna()
        df_clean = df_clean[
            (df_clean['velocity_ms'] > 0) & 
            (df_clean['range_m'] > 0) & 
            (df_clean['elevation_deg'] >= 0) &
            (df_clean['elevation_deg'] <= 90)
        ]
        
        print(f"‚úì Dados limpos: {len(df_clean)} registros v√°lidos ({initial_count - len(df_clean)} removidos)")
        
        # Estat√≠sticas b√°sicas
        print("\nüìä Estat√≠sticas dos dados:")
        print(f"  Velocidade: {df_clean['velocity_ms'].min():.0f} - {df_clean['velocity_ms'].max():.0f} m/s")
        print(f"  Alcance: {df_clean['range_m'].min():.0f} - {df_clean['range_m'].max():.0f} m")
        print(f"  Eleva√ß√£o: {df_clean['elevation_deg'].min():.2f} - {df_clean['elevation_deg'].max():.2f}¬∞")
        print(f"  Deriva: {df_clean['drift_deg'].min():.4f} - {df_clean['drift_deg'].max():.4f}¬∞")
        
        return df_clean
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar dados: {e}")
        return pd.DataFrame()

def setup_projectile_155mm() -> ProjectileData:
    """
    Configura dados do proj√©til 155mm (M107/M1) baseado em especifica√ß√µes reais
    """
    return ProjectileData(
        mass=43.2,  # kg - massa t√≠pica do M107
        diameter=0.155,  # m - calibre 155mm
        cross_sectional_area=math.pi * (0.155/2)**2,  # m¬≤
        initial_axial_moment=0.32,  # kg*m¬≤ - momento de in√©rcia estimado
        initial_spin_rate=285.0  # rad/s - rota√ß√£o t√≠pica (~45 rev/s)
    )

def setup_atmospheric_conditions() -> AtmosphericConditions:
    """
    Configura condi√ß√µes atmosf√©ricas padr√£o conforme STANAG 4144
    """
    return AtmosphericConditions(
        temperature=288.15,  # K (15¬∞C)
        pressure=101325.0,   # Pa (n√≠vel do mar)
        humidity=0.0,        # % (ar seco)
        wind_speed=(0.0, 0.0, 0.0)  # m/s (sem vento)
    )

def setup_aerodynamic_coefficients() -> AerodynamicCoefficients:
    """
    Configura coeficientes aerodin√¢micos t√≠picos para proj√©til 155mm
    Valores baseados em literatura bal√≠stica e dados experimentais
    """
    return AerodynamicCoefficients(
        cd0=0.25,      # Coeficiente de arrasto base
        cd2=8.0,       # Arrasto quadr√°tico de yaw
        cl_alpha=2.0,  # Sustenta√ß√£o linear
        cm_alpha=0.5,  # Momento de capotagem
        c_mag_f=1.5,   # For√ßa Magnus
        c_spin=0.01    # Amortecimento de rota√ß√£o
    )

def analyze_velocity_groups(df: pd.DataFrame) -> dict:
    """
    Analisa grupos de velocidade para otimizar compara√ß√µes
    """
    velocity_groups = {}
    velocities = df['velocity_ms'].unique()
    
    print(f"\nüéØ Velocidades √∫nicas encontradas: {len(velocities)}")
    
    for vel in sorted(velocities):
        group_data = df[df['velocity_ms'] == vel]
        velocity_groups[vel] = {
            'count': len(group_data),
            'min_range': group_data['range_m'].min(),
            'max_range': group_data['range_m'].max(),
            'elevation_range': (group_data['elevation_deg'].min(), group_data['elevation_deg'].max())
        }
        
        print(f"  V‚ÇÄ={vel:.0f} m/s: {len(group_data)} pontos, "
              f"alcance {group_data['range_m'].min()/1000:.1f}-{group_data['range_m'].max()/1000:.1f}km, "
              f"eleva√ß√£o {group_data['elevation_deg'].min():.1f}-{group_data['elevation_deg'].max():.1f}¬∞")
    
    return velocity_groups

def generate_comprehensive_analysis(ballistic_sim, df: pd.DataFrame, chart_utils: 'ChartUtils', 
                                  output_dir: str = "ballistic-analysis/output"):
    """
    Gera an√°lise completa com m√∫ltiplas compara√ß√µes
    """
    # Criar diret√≥rio de sa√≠da
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    print(f"\nüìà Gerando an√°lise completa...")
    
    # An√°lise por grupos de velocidade
    velocity_groups = analyze_velocity_groups(df)
    
    # 1. AN√ÅLISE GERAL - Todas as velocidades
    print("\n1Ô∏è‚É£ Compara√ß√£o geral (todas as velocidades)...")
    try:
        comparison_all = chart_utils.compare_trajectories(
            ballistic_sim, df, max_trajectories=8
        )
        
        plt.savefig(f"{output_dir}/comparison_all_velocities.png", 
                   dpi=300, bbox_inches='tight')
        plt.show()
        
        print(f"   R¬≤ alcance: {comparison_all.statistics['range_r2']:.4f}")
        print(f"   RMSE alcance: {comparison_all.errors['range_rmse']:.1f} m")
        print(f"   Correla√ß√£o alcance: {comparison_all.statistics['range_correlation']:.4f}")
        
    except Exception as e:
        print(f"   ‚ùå Erro na an√°lise geral: {e}")
    
    # 2. AN√ÅLISE POR VELOCIDADE ESPEC√çFICA
    main_velocities = sorted(df['velocity_ms'].value_counts().head(3).index)
    
    for i, velocity in enumerate(main_velocities, 2):
        print(f"\n{i}Ô∏è‚É£ An√°lise para V‚ÇÄ={velocity:.0f} m/s...")
        
        try:
            comparison_vel = chart_utils.compare_trajectories(
                ballistic_sim, df, velocity_filter=velocity, max_trajectories=6
            )
            
            plt.savefig(f"{output_dir}/comparison_velocity_{velocity:.0f}ms.png", 
                       dpi=300, bbox_inches='tight')
            plt.show()
            
            print(f"   R¬≤ alcance: {comparison_vel.statistics['range_r2']:.4f}")
            print(f"   RMSE alcance: {comparison_vel.errors['range_rmse']:.1f} m")
            
        except Exception as e:
            print(f"   ‚ùå Erro na an√°lise de V‚ÇÄ={velocity:.0f}: {e}")
    
    # 3. AN√ÅLISE DOS FATORES DE AJUSTE
    print(f"\n{len(main_velocities)+2}Ô∏è‚É£ An√°lise do efeito dos fatores de ajuste...")
    
    try:
        # Usar velocidade com mais dados
        main_velocity = df['velocity_ms'].value_counts().index[0]
        
        chart_utils.plot_fitting_factors_effect(
            ballistic_sim, df, 
            form_factors=[0.95, 1.0, 1.05],
            lift_factors=[0.8, 1.0, 1.2],
            velocity=main_velocity
        )
        
        plt.savefig(f"{output_dir}/fitting_factors_effect.png", 
                   dpi=300, bbox_inches='tight')
        plt.show()
        
    except Exception as e:
        print(f"   ‚ùå Erro na an√°lise de fatores: {e}")
    
    print(f"\n‚úÖ An√°lise completa finalizada. Arquivos salvos em: {output_dir}")

def main():
    """
    Fun√ß√£o principal para an√°lise bal√≠stica completa
    """
    print("üéØ AN√ÅLISE BAL√çSTICA - STANAG 4144 (Anexo H)")
    print("=" * 60)
    print(f"Iniciado em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Configura√ß√£o dos caminhos
    data_path = "/Users/pedrojob/Desktop/PFC/ballistic-analysis/data/processed/unified_fire_tables.csv"
    output_dir = "ballistic-analysis/output"
    
    try:
        # 1. CARREGAR DADOS
        print("\nüìÇ Carregando dados da tabela de tiro...")
        df = load_fire_table_data(data_path)
        
        if df.empty:
            print("‚ùå Falha ao carregar dados. Encerrando an√°lise.")
            return
        
        # 2. CONFIGURAR SIMULA√á√ÉO BAL√çSTICA
        print("\n‚öôÔ∏è Configurando simula√ß√£o bal√≠stica...")
        
        projectile = setup_projectile_155mm()
        atmosphere = setup_atmospheric_conditions()
        aero_coeffs = setup_aerodynamic_coefficients()
        
        # Fatores de ajuste iniciais (sem corre√ß√£o)
        fitting_factors = FittingFactors(
            form_factor=1.0,
            lift_factor=1.0,
            drag_factor=1.0,
            yaw_drag_factor=1.0,
            magnus_factor=1.0
        )
        
        # Inicializar simula√ß√£o
        ballistic_sim = BallisticSimulation(
            projectile, atmosphere, aero_coeffs, fitting_factors
        )
        
        print("‚úì Simula√ß√£o bal√≠stica configurada")
        print(f"‚úì Proj√©til: 155mm, massa={projectile.mass}kg")
        print(f"‚úì Fatores de ajuste: i={fitting_factors.form_factor}, fL={fitting_factors.lift_factor}")
        
        # 3. CONFIGURAR UTILIT√ÅRIOS DE GR√ÅFICO
        print("\nüìä Configurando utilit√°rios de visualiza√ß√£o...")
        chart_utils = ChartUtils(figsize=(15, 10))
        print("‚úì ChartUtils configurado")
        
        # 4. AN√ÅLISE R√ÅPIDA INICIAL
        print("\nüîç Teste r√°pido do modelo...")
        test_velocity = df['velocity_ms'].iloc[0]
        test_elevation = df['elevation_deg'].iloc[0]
        
        range_calc, drift_calc = ballistic_sim.calculate_range_for_elevation(
            test_elevation * 1000 * 60 / 180,  # Converter para mils
            test_velocity
        )
        
        expected_range = df['range_m'].iloc[0]
        expected_drift = df['drift_deg'].iloc[0]
        
        print(f"‚úì Teste: V‚ÇÄ={test_velocity}m/s, QE={test_elevation}¬∞")
        print(f"  Alcance - Esperado: {expected_range:.0f}m, Calculado: {range_calc:.0f}m")
        print(f"  Deriva - Esperada: {expected_drift:.4f}¬∞, Calculada: {drift_calc:.4f}¬∞")
        print(f"  Erro de alcance: {abs(range_calc - expected_range)/expected_range*100:.1f}%")
        
        # 5. AN√ÅLISE COMPLETA
        print("\nüöÄ Iniciando an√°lise completa...")
        generate_comprehensive_analysis(ballistic_sim, df, chart_utils, output_dir)
        
        # 6. RESUMO FINAL
        print("\nüìã RESUMO DA AN√ÅLISE")
        print("=" * 40)
        print(f"‚úì Dados processados: {len(df)} registros")
        print(f"‚úì Velocidades analisadas: {len(df['velocity_ms'].unique())}")
        print(f"‚úì Faixa de alcance: {df['range_m'].min()/1000:.1f} - {df['range_m'].max()/1000:.1f} km")
        print(f"‚úì Faixa de eleva√ß√£o: {df['elevation_deg'].min():.1f} - {df['elevation_deg'].max():.1f}¬∞")
        print(f"‚úì Gr√°ficos salvos em: {output_dir}")
        
        print("\nüéØ PR√ìXIMOS PASSOS SUGERIDOS:")
        print("1. Implementar algoritmos de otimiza√ß√£o (Newton-Raphson, Gauss-Newton)")
        print("2. Calcular fatores de ajuste √≥timos (i, fL) para minimizar erros")
        print("3. Comparar desempenho dos diferentes m√©todos num√©ricos")
        print("4. Validar resultados com dados de teste independentes")
        
    except FileNotFoundError as e:
        print(f"\n‚ùå ERRO: Arquivo n√£o encontrado")
        print(f"Verifique se o arquivo existe em: {data_path}")
        print("Estrutura esperada do diret√≥rio:")
        print("ballistic-analysis/")
        print("‚îú‚îÄ‚îÄ data/")
        print("‚îÇ   ‚îî‚îÄ‚îÄ processed/")
        print("‚îÇ       ‚îî‚îÄ‚îÄ unified_fire_tables.csv")
        print("‚îî‚îÄ‚îÄ output/")
        
    except Exception as e:
        print(f"\n‚ùå ERRO INESPERADO: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        print(f"\nFinalizado em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()